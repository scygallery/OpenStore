{"version":3,"file":"static/chunks/pages/create-a3cb12a1d05ec8f750e3.js","mappings":"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","sources":["webpack://_N_E/./pages/create.js","webpack://_N_E/?43d7"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { create as ipfsHttpClient } from \"ipfs-http-client\";\nimport WaveFooter from \"../components/WaveFooter\";\nimport { useRouter } from \"next/router\";\nimport Image from \"next/image\";\nimport Web3Modal from \"web3modal\";\nimport Script from \"next/script\";\nimport Head from \"next/head\";\nimport Footer from \"../components/Footer\";\n\nconst client = ipfsHttpClient(\"https://ipfs.infura.io:5001/api/v0\");\n\nimport { nftaddress, nftmarketaddress } from \"../config\";\n\nimport NFT from \"../artifacts/contracts/NFT.sol/NFT.json\";\nimport NFTMarket from \"../artifacts/contracts/NFTMarket.sol/NFTMarket.json\";\n\nexport default function CreateItem() {\n  const [values, setValues] = useState({\n    price: \"\",\n    name: \"\",\n    category: \"\",\n    fileUrl: null,\n    description: \"\",\n  });\n  const router = useRouter();\n\n  async function onChange(e) {\n    const file = e.target.files[0];\n    try {\n      const added = await client.add(file, {\n        progress: (prog) => console.log(`received: ${prog}`),\n      });\n      const fileUrl = `https://ipfs.infura.io/ipfs/${added.path}`;\n      setValues({ ...values, fileUrl });\n    } catch (error) {\n      console.log(\"Error uploading file: \", error);\n    }\n  }\n  async function createMarket() {\n    const { name, description, price, fileUrl, category } = values;\n    if (!name || !description || !price || !fileUrl || !category) return;\n    /* first, upload to IPFS */\n    const data = JSON.stringify({\n      name,\n      description,\n      image: fileUrl,\n    });\n    try {\n      const added = await client.add(data);\n      const url = `https://ipfs.infura.io/ipfs/${added.path}`;\n      /* after file is uploaded to IPFS, pass the URL to save it on Polygon */\n      createSale(url);\n    } catch (error) {\n      console.log(\"Error uploading file: \", error);\n    }\n  }\n\n  async function createSale(url) {\n    const web3Modal = new Web3Modal();\n    const connection = await web3Modal.connect();\n    const provider = new ethers.providers.Web3Provider(connection);\n    const signer = provider.getSigner();\n    console.log(url);\n\n    /* next, create the item */\n    try {\n      let contract = new ethers.Contract(nftaddress, NFT.abi, signer);\n      let transaction = await contract.createToken(url);\n      let tx = await transaction.wait();\n      console.log(tx);\n      let event = tx.events[0];\n      let value = event.args[2];\n      let tokenId = value.toNumber();\n      console.log(values);\n      const price = ethers.utils.parseUnits(values.price, \"ether\");\n      console.log(price.toString());\n\n      /* then list the item for sale on the marketplace */\n      contract = new ethers.Contract(nftmarketaddress, NFTMarket.abi, signer);\n      let listingPrice = await contract.getListingPrice();\n      listingPrice = listingPrice.toString();\n\n      transaction = await contract.createMarketItem(\n        nftaddress,\n        tokenId,\n        price,\n        values.category,\n        {\n          value: listingPrice,\n        }\n      );\n      await transaction.wait();\n      router.push(\"/\");\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const handleChange = (e) => {\n    setValues((prevValues) => {\n      return {\n        ...prevValues,\n        [e.target.name]: e.target.value,\n      };\n    });\n  };\n\n  useEffect(() => console.log(values), [values]);\n\n  return (\n    <div>\n      <Script src=\"https://kit.fontawesome.com/a076d05399.js\" />\n      <Head>\n        <title>Create Asset</title>\n      </Head>\n\n      <main>\n        <h1 className=\"text-center my-5 header display-4\">Create Asset</h1>\n\n        <div style={{ marginBottom: \"50px\" }} className=\"container \">\n          <div className=\"row \">\n            <div\n              className=\"col-sm-6 block-to-disappear-in-mobile \"\n              style={{ padding: \"30px\" }}\n            >\n              <Image\n                unoptimized={true}\n                src=\"https://res.cloudinary.com/dnv3ztqf1/image/upload/v1632635884/devathon/create-asset_nvz7xi.svg\"\n                layout=\"fill\"\n                alt=\"image htmlFor add doctor\"\n              />\n            </div>\n            <div className=\"col-sm-6\">\n              <for action=\"/adddoctor\" method=\"POST\" className=\"form-group\">\n                <input\n                  type=\"hidden\"\n                  name=\"csrfmiddlewaretoken\"\n                  value=\"fIwiR9rbZTmvxfmW8gC8CiS93Zx36iAh0kdWjuhKGglTMld96xGITqBEbdBR4EkY\"\n                />\n                <ul className=\"unordered-list\">\n                  <li>\n                    <label htmlFor=\"id_name\">Asset Name:</label>{\" \"}\n                    <input\n                      type=\"text\"\n                      name=\"name\"\n                      placeholder=\"Asset Name\"\n                      maxLength=\"500\"\n                      required\n                      onChange={handleChange}\n                      id=\"id_name\"\n                    />\n                  </li>\n                  <li>\n                    <label htmlFor=\"id_description\">Asset Description</label>{\" \"}\n                    <textarea\n                      type=\"text\"\n                      name=\"description\"\n                      style={{ height: \"20vh\", resize: \"none\" }}\n                      maxLength=\"500\"\n                      placeholder=\"Describe your asset in 500 or less characters\"\n                      required\n                      onChange={handleChange}\n                      id=\"id_description\"\n                    />\n                  </li>\n                  <li>\n                    <label htmlFor=\"id_price_in_eth\">Asset price in ETH:</label>{\" \"}\n                    <input\n                      type=\"number\"\n                      name=\"price\"\n                      required\n                      onChange={handleChange}\n                      id=\"id_price_in_eth\"\n                    />\n                  </li>\n                  <li>\n                    <label htmlFor=\"id_image\">Asset Image:</label>{\" \"}\n                    <input\n                      type=\"file\"\n                      accept=\"image/*\"\n                      name=\"Asset\"\n                      className=\"my-4\"\n                      onChange={onChange}\n                    />\n                  </li>\n                </ul>\n                <div style={{ width: \"100%\" }}>\n                  <div className=\"text-center\">\n                    {values.fileUrl && (\n                      <Image\n                      unoptimized={true}\n                        src={values.fileUrl}\n                        height=\"350\"\n                        width=\"350\"\n                        alt=\"Product image\"\n                      />\n                    )}\n                  </div>\n                </div>\n                <label htmlFor=\"category\">Category:</label>{\" \"}\n                <select name=\"category\" id=\"category\" onChange={handleChange}>\n                  <option value=\"\">Select a category</option>\n                  <option value=\"Art\">Art</option>\n                  <option value=\"Graphics\">Graphics</option>\n                  <option value=\"Others\">Others</option>\n                </select>\n                <button\n                  onClick={createMarket}\n                  className=\"btn mt-5 btn-block commonbutton5\"\n                  type=\"submit\"\n                >\n                  Submit\n                </button>\n              </for>\n            </div>\n          </div>\n        </div>\n      </main>\n      <footer>\n        <WaveFooter />\n        <Footer />\n      </footer>\n    </div>\n  );\n}\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/create\",\n      function () {\n        return require(\"private-next-pages/create.js\");\n      }\n    ]);\n  "],"names":["client","ipfsHttpClient","CreateItem","useState","price","name","category","fileUrl","description","values","setValues","router","useRouter","e","file","target","files","add","progress","prog","console","log","added","path","data","JSON","stringify","image","createSale","url","web3Modal","Web3Modal","connect","connection","provider","ethers","signer","getSigner","contract","nftaddress","NFT","createToken","transaction","wait","tx","event","events","value","args","tokenId","toNumber","toString","nftmarketaddress","NFTMarket","getListingPrice","listingPrice","createMarketItem","push","handleChange","prevValues","useEffect","src","className","style","marginBottom","padding","unoptimized","layout","alt","action","method","type","htmlFor","placeholder","maxLength","required","onChange","id","height","resize","accept","width","onClick","window","__NEXT_P"],"sourceRoot":""}